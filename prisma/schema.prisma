generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  password            String
  first_name          String
  last_name           String
  type                UserType            @default(User)
  is_verified         Boolean             @default(false)
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  verification_tokens VerificationToken[]
  ModelModerator      ModelModerator[]
  Conversation        Conversation[]
  Message             Message[]
  Payment             Payment[]

  @@map("users")
}

enum UserType {
  Admin
  Agent
  Client
  User
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String
  expires_at DateTime
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model Photo {
  id         Int      @id @default(autoincrement())
  url        String
  alt        String
  tags       Json
  likes      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("photos")
}

model Model {
  id           Int      @id @default(autoincrement())
  prenom       String
  age          Int
  nationalite  String
  passe_temps  String
  citation     String
  domicile     String
  photo        String?
  localisation String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  categories     ModelCategorie[]
  ModelModerator ModelModerator[]
  Conversation   Conversation[]

  @@map("models")
}

model Categorie {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  slug        String   @unique
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  models ModelCategorie[] // lien avec pivot
}

model ModelCategorie {
  id          Int      @id @default(autoincrement())
  modelId     Int
  categorieId Int
  created_at  DateTime @default(now())

  // Relations
  model     Model     @relation(fields: [modelId], references: [id])
  categorie Categorie @relation(fields: [categorieId], references: [id])

  @@unique([modelId, categorieId])
  @@map("model_categories")
}

model SiteSettings {
  id         Int      @id @default(autoincrement())
  section    String
  settings   Json
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([section])
  @@map("site_settings")
}

model ModelModerator {
  id      Int @id @default(autoincrement())
  modelId Int
  userId  Int

  model Model @relation(fields: [modelId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  created_at DateTime @default(now())

  @@unique([modelId, userId])
  @@map("model_moderators")
}

model Conversation {
  id       Int    @id @default(autoincrement())
  modelId  Int
  clientId Int
  status   String @default("active")

  model         Model     @relation(fields: [modelId], references: [id])
  client        User      @relation(fields: [clientId], references: [id])
  messages      Message[]
  is_premium    Boolean   @default(false)
  paymentId     Int?
  payment       Payment?  @relation(fields: [paymentId], references: [id])
  message_count Int       @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("conversations")
}

model Message {
  id             Int     @id @default(autoincrement())
  conversationId Int
  senderId       Int
  isFromModel    Boolean @default(false)
  content        String

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])

  created_at DateTime @default(now())

  @@map("messages")
}

model PaymentPlan {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  duration    Int // Dur√©e en jours
  credits     Int // Nombre de messages inclus
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  payments Payment[]

  @@map("payment_plans")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  EXPIRED
}

model Payment {
  id           Int           @id @default(autoincrement())
  userId       Int
  planId       Int
  stripeId     String        @unique
  amount       Float
  status       PaymentStatus @default(PENDING)
  credits      Int
  credits_used Int           @default(0)
  expires_at   DateTime?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          PaymentPlan    @relation(fields: [planId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@map("payments")
}
